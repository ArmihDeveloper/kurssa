{
  "courseTitle": "AI Agents Development Course",
  "chapters": [
    {
      "originalFileName": "KOD Solagents 2. Budowa Agenta.txt",
      "chapterNumber": 3,
      "title": "Budowa Agenta – Pisanie Kodu",
      "sections": [
        {
          "sectionTitle": "Wstęp",
          "contentBlocks": [
            {
              "type": "text",
              "value": "W folderze moj-agent-scraper stwórz plik o nazwie scraper_agent.py. Otwórz go w\nswoim ulubionym edytorze kodu (np. VS Code, PyCharm, a nawet Notatnik) i wklej p\noniższy kod. Zaraz omówimy go kawałek po kawałku."
            },
            {
              "type": "text",
              "value": "#"
            }
          ]
        },
        {
          "sectionTitle": "Krok 3.1: Importy i Konfiguracja",
          "contentBlocks": [
            {
              "type": "text",
              "value": "import os\nimport asyncio\nfrom e2b import Sandbox\nfrom playwright.async_api import async_playwright, Page\nfrom twocaptcha import TwoCaptcha\nfrom smol_agents import Agent\nfrom bs4 import BeautifulSoup\n\n# Wczytujemy klucze API ze zmiennych środowiskowych\n# Jeśli ich nie ustawiłeś, tutaj program zwróci błąd - i dobrze!\nE2B_API_KEY = os.getenv(\"E2B_API_KEY\")\nTWOCAPTCHA_API_KEY = os.getenv(\"TWOCAPTCHA_API_KEY\")\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# Opcjonalna konfiguracja proxy - uzupełnij, jeśli chcesz używać\nPROXY_CONFIG = {\n    \"server\": \"http://twoj_host_proxy:port\", # np. http://123.45.67.89:8080\n    \"username\": \"twoj_uzytkownik\",\n    \"password\": \"twoje_haslo_proxy\"\n}\n\n#"
            }
          ]
        },
        {
          "sectionTitle": "Krok 3.2: Sercem Operacji – Klasa SandboxedBrowser",
          "contentBlocks": [
            {
              "type": "text",
              "value": "class SandboxedBrowser:\n    \"\"\"\n    Klasa zarządzająca jedną, stałą sesją przeglądarki w sandboksie E2B.\n    Utrzymuje stan i pozwala na wykonywanie wielu operacji po kolei.\n    \"\"\"\n    def __init__(self, use_proxy: bool = False):\n        self.sandbox: Sandbox | None = None\n        self.page: Page | None = None\n        self.use_proxy = use_proxy\n        self.captcha_solver = TwoCaptcha(TWOCAPTCHA_API_KEY)\n\n    async def start(self):\n        \"\"\"Uruchamia sandbox, instaluje zależności i odpala przeglądarkę.\"\"\"\n        print(\"--- Inicjalizacja: Uruchamiam sandbox E2B... ---\")\n        self.sandbox = await Sandbox.create(template=\"base\", api_key=E2B_API_KEY\n)\n\n        print(\"--- Inicjalizacja: Instaluję zależności w sandboksie... ---\")\n        await self.sandbox.process.start_and_wait(\n            \"apt-get update && apt-get install -y libnss3 libnspr4 libdbus-1-3 l\nibatk1.0-0 libatk-bridge2.0-0 libcups2 libatspi2.0-0 libxcomposite1 libxdamage1\nlibxfixes3 libxrandr2 libgbm1 libxkbcommon0 libpango-1.0-0 libcairo2 libasound2\"\n        )\n        await self.sandbox.process.start_and_wait(\"pip install playwright beauti\nfulsoup4 && playwright install chrome\")\n\n        print(\"--- Inicjalizacja: Uruchamiam przeglądarkę Chrome w sandboksie...\n ---\")\n        browser_args = ['--headless=new']\n        if self.use_proxy:\n            browser_args.append(f\"--proxy-server={PROXY_CONFIG['server']}\")\n\n        self.playwright = await async_playwright().start()\n        self.browser = await self.playwright.chromium.launch(headless=True, args\n=browser_args)\n\n        context = await self.browser.new_context()\n        if self.use_proxy:\n            await context.set_http_credentials({\n                'username': PROXY_CONFIG['username'],\n                'password': PROXY_CONFIG['password']\n            })\n\n        self.page = await context.new_page()\n        print(\"--- Inicjalizacja: Przeglądarka jest gotowa do pracy! ---\")\n\n    async def close(self):\n        \"\"\"Zamyka przeglądarkę i sandbox.\"\"\"\n        print(\"--- Zamykanie: Sprzątam po sobie... ---\")\n        if hasattr(self, 'browser') and self.browser: await self.browser.close()\n        if hasattr(self, 'playwright') and self.playwright: await self.playwrigh\nt.stop()\n        if self.sandbox: await self.sandbox.close()\n        print(\"--- Zamykanie: Sesja zakończona. ---\")\n\n    # === NARZĘDZIA DLA AGENTA ===\n\n    async def navigate(self, url: str) -> str:\n        \"\"\"Nawiguje do podanego adresu URL.\"\"\"\n        print(f\"--- Narzędzie: Nawiguję do {url} ---\")\n        await self.page.goto(url, wait_until='domcontentloaded')\n        return f\"Pomyślnie przeniesiono na stronę: {url}\"\n\n    async def click_element(self, selector: str) -> str:\n        \"\"\"Klika na element na stronie używając selektora CSS.\"\"\"\n        print(f\"--- Narzędzie: Klikam w element '{selector}' ---\")\n        await self.page.click(selector, timeout=5000)\n        return f\"Pomyślnie kliknięto w element '{selector}'.\"\n\n    async def fill_input(self, selector: str, text: str) -> str:\n        \"\"\"Wypełnia pole tekstowe na stronie.\"\"\"\n        print(f\"--- Narzędzie: Wypełniam pole '{selector}' tekstem '{text}' ---\"\n)\n        await self.page.fill(selector, text)\n        return f\"Pomyślnie wypełniono pole '{selector}'.\"\n\n    async def get_content(self) -> str:\n        \"\"\"Pobiera i zwraca całą treść tekstową aktualnej strony.\"\"\"\n        print(\"--- Narzędzie: Pobieram treść strony... ---\")\n        content_html = await self.page.content()\n        await self.sandbox.filesystem.write(\"/tmp/page.html\", content_html)\n        script = \"\"\"\nfrom bs4 import BeautifulSoup\nwith open('/tmp/page.html', 'r', encoding='utf-8') as f:\n    soup = BeautifulSoup(f, 'html.parser')\n    for item in soup([\"script\", \"style\"]): item.extract()\n    print(soup.get_text(separator=' ', strip=True))\n\"\"\"\n        proc = await self.sandbox.process.start_and_wait(f\"python -c \\\"{script}\\\"\")\n        return f\"Oto treść strony: {proc.stdout}\"\n\n\n    async def solve_and_fill_captcha(self, captcha_selector: str, input_selector\n: str) -> str:\n        \"\"\"Znajduje obrazek CAPTCHA, rozwiązuje go i wpisuje wynik do pola.\"\"\"\n        print(f\"--- Narzędzie: Rozpoczynam rozwiązywanie CAPTCHA... ---\")\n        captcha_element = self.page.locator(captcha_selector)\n        screenshot_bytes = await captcha_element.screenshot()\n        captcha_path_in_sandbox = \"/tmp/captcha.png\"\n        await self.sandbox.filesystem.write(captcha_path_in_sandbox, screenshot_\nbytes)\n        print(\"--- Krok 1: Zrobiono zrzut ekranu CAPTCHA. Wysyłam do API... ---\"\n)\n        result = self.captcha_solver.normal(screenshot_bytes)\n        captcha_text = result.get('code')\n        print(f\"--- Krok 2: Otrzymano rozwiązanie: '{captcha_text}' ---\")\n        await self.fill_input(input_selector, captcha_text)\n        return f\"Pomyślnie rozwiązano CAPTCHA i wpisano tekst.\"\n\n#"
            }
          ]
        },
        {
          "sectionTitle": "Krok 3.3: Mózg Operacji – Definicja Agenta",
          "contentBlocks": [
            {
              "type": "text",
              "value": "def create_agent(browser_session: SandboxedBrowser) -> Agent:\n    return Agent(\n        name=\"AgentScraperPro\",\n        description=\"Agent-ekspert od web scrapingu, który operuje na stałej ses\nji przeglądarki. Potrafi nawigować, klikać, wypełniać pola i rozwiązywać CAPTCHA\n.\",\n        model=\"gpt-4-turbo\",\n        tools=[\n            browser_session.navigate,\n            browser_session.click_element,\n            browser_session.fill_input,\n            browser_session.get_content,\n            browser_session.solve_and_fill_captcha,\n        ],\n        api_key=OPENAI_API_KEY\n    )\n\n#"
            }
          ]
        },
        {
          "sectionTitle": "Krok 3.4: Główna Funkcja 'main' – Dyrygent Orkiestry",
          "contentBlocks": [
            {
              "type": "text",
              "value": "async def main():\n    browser_session = SandboxedBrowser(use_proxy=False)\n    try:\n        await browser_session.start()\n        agent = create_agent(browser_session)\n\n        zadanie = \"Wejdź na stronę 'https://quotes.toscrape.com/'. Następnie kli\nknij w link 'Login' w prawym górnym rogu. Na koniec pobierz całą widoczną treść\nstrony logowania.\"\n        print(f\"\\n--- Zlecenie dla Agenta: {zadanie} ---\\n\")\n\n        wynik = await agent.arun(zadanie)\n        print(f\"\\n--- Ostateczny Raport Agenta ---\\n{wynik}\")\n\n    except Exception as e:\n        print(f\"Wystąpił nieoczekiwany błąd główny: {e}\")\n    finally:\n        await browser_session.close()\n\nif __name__ == \"__main__\":\n    if not all([OPENAI_API_KEY, E2B_API_KEY, TWOCAPTCHA_API_KEY]):\n        print(\"BŁĄD: Brak jednego lub więcej kluczy API. Ustaw je jako zmienne\nśrodowiskowe!\")\n    else:\n        asyncio.run(main())"
            }
          ]
        }
      ]
    },
    {
      "originalFileName": "Smolagents 3 Pamiec I zapis danych.txt",
      "chapterNumber": 6,
      "title": "Pamięć i Zapis Danych – Od Scrapera do Reportera...",
      "sections": []
    },
    {
      "originalFileName": "Smolagenta 4 Agent Ktory Mysli.txt",
      "chapterNumber": 7,
      "title": "Agent, który Myśli – Planowanie, Samokorekta i Pętle ReAct...",
      "sections": []
    },
    {
      "originalFileName": "Smolagents 5. Zaawansowane techniki scrapingu.txt",
      "chapterNumber": 8,
      "title": "Zaawansowane Techniki Scrapingu – Niewidzialność i Dynamiczna Treść...",
      "sections": []
    },
    {
      "originalFileName": "Smolagents 6. Monitorowanie i obsluga bledow.txt",
      "chapterNumber": 9,
      "title": "Agent pod Mikroskopem – Monitorowanie i Obsługa Błędów z Langfuse...",
      "sections": []
    },
    {
      "originalFileName": "Smolagents 7. Optymalizacja kosztow i wydajnosci.txt",
      "chapterNumber": 10,
      "title": "Optymalizacja Kosztów i Wydajności – Jak nie zbankrutować?...",
      "sections": []
    },
    {
      "originalFileName": "Smolagents 8 Uruchomienie Agenta w chmurze.txt",
      "chapterNumber": 11,
      "title": "Uruchomienie Agenta w Chmurze – Jak Wdrożyć Swój Projekt na Serwer?...",
      "sections": []
    }
  ]
}